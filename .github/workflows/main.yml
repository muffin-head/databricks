on: [push]
name: databrideployment1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ResourceGroupName: test-rg
      ResourceGroupLocation: "eastus"
      AZURE_DATABRICKS_APP_ID: "2ff814a6-3304-4ab8-85cb-cd0e6f879c1d"
     
    steps:
    - uses: actions/checkout@master
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.DATA_BRICKS}}
        
    - uses: Azure/CLI@v1
      with:
        inlineScript: |
          #!/bin/bash
          if $(az group exists --name ${{ env.ResourceGroupName }}) ; then
            echo "Azure resource group already exists, skipping creation..."
          else
            az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
            echo "Azure resource group created"
          fi
    - uses: azure/arm-deploy@v1
      with:
       resourceGroupName: ${{ env.ResourceGroupName }}
       template: eventhub.json
       parameters: eventhub.parameters.json


    - uses: Azure/CLI@v1
      with:
      
        inlineScript: |
          #!/bin/bash
          export ARM_SUBSCRIPTION_ID="63c2f8f9-a3f8-4cbf-aaeb-341fc75caaa3"
          export ARM_TENANT_ID="617e0530-4dad-4d11-befa-afcb00e44e79"
          export ARM_CLIENT_ID="c08b3d6e-fd49-4dde-b8f8-6334575cd86b"
          export ARM_CLIENT_SECRET="StNGlrnuOmzooZsBMK7~AZODTP~B1pQ-vl"
          export MANAGEMENT_RESOURCE_ENDPOINT="https://management.core.windows.net/" # This is Fixed value (DO NOT CHANGE)
          export AZURE_DATABRICKS_APP_ID="2ff814a6-3304-4ab8-85cb-cd0e6f879c1d" # This is Fixed value (DO NOT CHANGE)
          export LOCATION="eastus"
          export DATABRICKS_WORKSPACE="muffinhead250998"
          export DATABRICKS_CLUSTER_NAME="test-cluster-25"
          export DATABRICKS_SPARK_VERSION="7.3.x-scala2.12"
          export DATABRICKS_NODE_TYPE="Standard_D3_v2"
          export DATABRICKS_NUM_WORKERS=1# Need to be number
          export DATABRICKS_SPARK_CONF='{"spark.speculation":"true"}' # Needs to be valid JSON
          export DATABRICKS_AUTO_TERMINATE_MINUTES=60 # Need to be a number
          



          az config set extension.use_dynamic_install=yes_without_prompt

          wsId=$(az resource show --resource-type Microsoft.Databricks/workspaces --resource-group ${{ env.ResourceGroupName }} -n "$DATABRICKS_WORKSPACE" --query id -o tsv)
          echo "Workspce ID: $wsId"


          workspaceUrl=$(az resource show --resource-type Microsoft.Databricks/workspaces --resource-group ${{ env.ResourceGroupName }} -n "$DATABRICKS_WORKSPACE" --query properties.workspaceUrl --output tsv)
          echo "Workspce URL: $workspaceUrl"


          token_response=$(az account get-access-token --resource ${{ env.AZURE_DATABRICKS_APP_ID }})
          echo $token_response

          token=$(jq .accessToken -r <<< "$token_response")
          echo "Token: $token"



          az_mgmt_resource_endpoint=$(curl -X GET -H 'Content-Type: application/x-www-form-urlencoded' \
          -d 'grant_type=client_credentials&client_id='$ARM_CLIENT_ID'&resource='$MANAGEMENT_RESOURCE_ENDPOINT'&client_secret='$ARM_CLIENT_SECRET \
          https://login.microsoftonline.com/$ARM_TENANT_ID/oauth2/token)

          
          mgmt_access_token=$(jq .access_token -r <<< "$az_mgmt_resource_endpoint" )
          echo "Management Access Token: $mgmt_access_token"
          
          pat_token_response=$(curl -X POST -H "Authorization: Bearer $token" -H "X-Databricks-Azure-SP-Management-Token: $mgmt_access_token" -H "X-Databricks-Azure-Workspace-Resource-Id: $wsId" -d '{"lifetime_seconds": 300,"comment": "this is an example token"}' https://$workspaceUrl/api/2.0/token/create) 


          pat_token=$(jq .token_value -r <<< "$pat_token_response") 
          echo $pat_token
          
          JSON_STRING=$( jq -n -c \
                --arg cn "$DATABRICKS_CLUSTER_NAME" \
                --arg sv "$DATABRICKS_SPARK_VERSION" \
                --arg nt "$DATABRICKS_NODE_TYPE" \
                --arg nw "$DATABRICKS_NUM_WORKERS" \
                --arg sc "$DATABRICKS_SPARK_CONF" \
                --arg at "$DATABRICKS_AUTO_TERMINATE_MINUTES" \
                '{cluster_name: $cn,
                spark_version: $sv,
                node_type_id: $nt,
                num_workers: ($nw|tonumber),
                autotermination_minutes: ($at|tonumber),
                spark_conf: ($sc|fromjson)}' )          


          cluster_id_response=$(curl -X POST \
            -H "Authorization: Bearer $token" \
            -H "X-Databricks-Azure-SP-Management-Token: $mgmt_access_token" \
            -H "X-Databricks-Azure-Workspace-Resource-Id: $wsId" \
            -d $JSON_STRING \
             https://$workspaceUrl/api/2.0/clusters/create)


            cluster_id=$(jq .cluster_id -r <<< "$cluster_id_response")
            echo "Cluster id: $cluster_id"




 
